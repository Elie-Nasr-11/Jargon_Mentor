# Add Two Numbers
SET a (3)
SET b (5)
SET result (a + b)
PRINT result
# Output:
8

# Find Maximum of Two Numbers
SET a (9)
SET b (4)
IF a is greater than b THEN
    PRINT a
END
IF b is greater than or equal to a THEN
    PRINT b
END
# Output:
9

# Square a Number
SET x (7)
SET result (x * x)
PRINT result
# Output:
49

# Find Minimum of Two Numbers
SET a (9)
SET b (4)
IF a is less than b THEN
    PRINT a
END
IF b is less than or equal to a THEN
    PRINT b
END
# Output:
4

# Check Even or Odd
SET num (7)
IF (num % 2) is equal to 0 THEN
    PRINT "Even"
END
IF (num % 2) is not equal to 0 THEN
    PRINT "Odd"
END
# Output:
Odd

# Average of a List
SET nums ([2, 4, 6])
SET total (0)
SET i (0)
REPEAT_UNTIL i reaches end of nums
    SET total (total + nums[i])
    SET i (i + 1)
END
SET average (total / 3)
PRINT average
# Output:
4

# Count Even Numbers in a List
SET nums ([1, 2, 4, 7, 8])
SET count (0)
SET i (0)
REPEAT_UNTIL i reaches end of nums
    IF (nums[i] % 2) is equal to 0 THEN
        SET count (count + 1)
    END
    SET i (i + 1)
END
PRINT count
# Output:
3

# Reverse a List
SET nums ([1, 2, 3, 4])
SET reversed ([])
SET i (3)
REPEAT_UNTIL i is less than 0
    ADD nums[i] to reversed
    SET i (i - 1)
END
PRINT reversed
# Output:
[4, 3, 2, 1]

# Linear Search
SET nums ([5, 3, 8, 2, 9])
SET target (8)
SET index (-1)
SET i (0)
REPEAT_UNTIL i reaches end of nums
    IF nums[i] is equal to target THEN
        SET index (i)
    END
    SET i (i + 1)
END
PRINT index
# Output:
2

# Find Minimum in List
SET nums ([5, 3, 8, 2, 9])
SET min (nums[0])
SET i (1)
REPEAT_UNTIL i reaches end of nums
    IF nums[i] is less than min THEN
        SET min (nums[i])
    END
    SET i (i + 1)
END
PRINT min
# Output:
2

# Count Occurrences of Element
SET nums ([2, 3, 2, 2, 5])
SET target (2)
SET count (0)
SET i (0)
REPEAT_UNTIL i reaches end of nums
    IF nums[i] is equal to target THEN
        SET count (count + 1)
    END
    SET i (i + 1)
END
PRINT count
# Output:
3

# Generate Fibonacci Sequence
SET fib ([0, 1])
SET i (2)
REPEAT_UNTIL i is equal to 10
    SET next (fib[i - 1] + fib[i - 2])
    ADD next to fib
    SET i (i + 1)
END
PRINT fib
# Output:
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]

# Selection Sort
SET nums ([5, 3, 8, 2, 9])
SET sorted ([])
SET i (0)
REPEAT_UNTIL i reaches end of nums
    SET j (0)
    SET min_index (0)
    REPEAT_UNTIL j reaches end of nums
        IF nums[j] is less than nums[min_index] THEN
            SET min_index (j)
        END
        SET j (j + 1)
    END
    ADD nums[min_index] to sorted
    SET new_nums ([])
    SET k (0)
    REPEAT_UNTIL k reaches end of nums
        IF k is not equal to min_index THEN
            ADD nums[k] to new_nums
        END
        SET k (k + 1)
    END
    SET nums (new_nums)
    SET i (i + 1)
END
PRINT sorted
# Output:
[2, 3, 5, 8, 9]

# Quick Sort (One-Level Partition)
SET list ([5, 3, 8, 2, 9])
SET pivot (list[0])
SET less ([])
SET greater_equal ([])
SET i (1)
REPEAT_UNTIL i is equal to 5
    IF list[i] is less than pivot THEN
        ADD list[i] to less
    END
    IF list[i] is greater than or equal to pivot THEN
        ADD list[i] to greater_equal
    END
    SET i (i + 1)
END
SET partitioned ([])
SET j (0)
REPEAT_UNTIL j reaches end of less
    ADD less[j] to partitioned
    SET j (j + 1)
END
ADD pivot to partitioned
SET j (0)
REPEAT_UNTIL j reaches end of greater_equal
    ADD greater_equal[j] to partitioned
    SET j (j + 1)
END
PRINT partitioned
# Output:
[3, 2, 5, 8, 9]

# Dijkstraâ€™s Shortest Path Algorithm
TRUNCATED FOR SPACE
# Output:
[0, 10, 50, 30, 60]

